#!/bin/bash
# Usage function
function usage() {
    echo -e "Usage: $(basename "$0") [options]"
    echo -e ""
    echo -e "OPTIONS:"
    echo -e "  -c --clean\t clean all output files generated by programs"
    echo -e "  -t --test\t test all datapoints, the default is to test sample cases"
    echo -e "  -h --help\t print this message"
}

# Compare and Judge
function compare_and_judge {
    solution=$1
    width=$((${#in_name} + 6))
    output_file=${data_dir}/out/${language}_${solution}${no}.out
    bash -e ${script_dir}/${solution}.sh ${input_file} ${output_file} || exit $?
    if [ ${TEST_DATAPOINTS} -eq 0 ]; then
        if [ -e ${output_file} ]; then
            if diff <(head -n 1 ${correct_output_file}) <(head -n 1 ${output_file}); then
                printf "%s %-9s program test %2d: %${width}s passed\n" ${language} ${solution} ${no} ${filename}
            else
                printf "%s %-9s program test %2d: %${width}s failed\n" ${language} ${solution} ${no} ${filename}
                exit 2
            fi
        else
            printf "%s %-9s program test %2d: %${width}s ignored\n" ${language} ${solution} ${no} ${filename}
        fi
    else
        printf "%s %-9s program test %2d: %${width}s tested\n" ${language} ${solution} ${no} ${filename}
    fi
}

# Compile and test programs
function run_test {
    echo "--------------------------------------------------"
    language=$1
    script_dir="src/${language}"
    input_files=($(find ${data_dir} | grep -E ${in_name}.*\.txt | sort -V))
    for input_file in "${input_files[@]}"; do
        correct_output_file=${input_file/$in_name/$out_name}
        filename=${input_file##*/}
        no=${filename//[^0-9]/}

        compare_and_judge "basic"
        compare_and_judge "efficient"
    done
    echo "--------------------------------------------------"
}

# Parse arguments
CLEAN_FLAG=0
TEST_DATAPOINTS=0
while [[ $# -gt 0 ]]; do
    case "${1}" in
    -c | --clean) CLEAN_FLAG=1 ;;
    -t | --test) TEST_DATAPOINTS=1 ;;
    -h | --help)
        usage
        exit 0
        ;;
    *)
        echo "ERROR: Unrecognized argument: $1"
        usage
        exit 1
        ;;
    esac
    shift
done

# Initialize the path of input and output data files
in_name="input"
out_name="output"
data_dir="data/SampleTestCases"
if [ ${TEST_DATAPOINTS} -ne 0 ]; then
    in_name="in"
    out_name="out"
    data_dir="data/datapoints"
fi

# Jump to the root directory of this repo
pushd $(pwd) >/dev/null
cd $(dirname "$0")/../

# Create out folder
mkdir -p ${data_dir}/out

# Run tests
echo 'Test C++'
run_test "cpp"

echo 'Test Java'
run_test "java"

echo 'Test Python'
run_test "python"

# Clean generated output files
if [ ${CLEAN_FLAG} -ne 0 ]; then
    echo 'Cleaning generated output files...'
    rm -rf ${data_dir}/out/
fi

popd >/dev/null
